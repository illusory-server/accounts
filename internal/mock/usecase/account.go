// Code generated by MockGen. DO NOT EDIT.
// Source: account.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	account "github.com/illusory-server/accounts/internal/app/usecase/account"
	aggregate "github.com/illusory-server/accounts/internal/domain/aggregate"
	vo "github.com/illusory-server/accounts/internal/domain/vo"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// AddAvatarLink mocks base method.
func (m *MockUseCase) AddAvatarLink(ctx context.Context, id, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAvatarLink", ctx, id, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAvatarLink indicates an expected call of AddAvatarLink.
func (mr *MockUseCaseMockRecorder) AddAvatarLink(ctx, id, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAvatarLink", reflect.TypeOf((*MockUseCase)(nil).AddAvatarLink), ctx, id, url)
}

// Create mocks base method.
func (m *MockUseCase) Create(ctx context.Context, firstName, lastName, email, nick, password string) (*account.WithoutPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, firstName, lastName, email, nick, password)
	ret0, _ := ret[0].(*account.WithoutPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUseCaseMockRecorder) Create(ctx, firstName, lastName, email, nick, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUseCase)(nil).Create), ctx, firstName, lastName, email, nick, password)
}

// DeleteById mocks base method.
func (m *MockUseCase) DeleteById(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockUseCaseMockRecorder) DeleteById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockUseCase)(nil).DeleteById), ctx, id)
}

// DeleteManyByIds mocks base method.
func (m *MockUseCase) DeleteManyByIds(ctx context.Context, ids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteManyByIds", ctx, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteManyByIds indicates an expected call of DeleteManyByIds.
func (mr *MockUseCaseMockRecorder) DeleteManyByIds(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteManyByIds", reflect.TypeOf((*MockUseCase)(nil).DeleteManyByIds), ctx, ids)
}

// GetByEmail mocks base method.
func (m *MockUseCase) GetByEmail(ctx context.Context, email string) (*account.WithoutPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(*account.WithoutPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUseCaseMockRecorder) GetByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUseCase)(nil).GetByEmail), ctx, email)
}

// GetById mocks base method.
func (m *MockUseCase) GetById(ctx context.Context, id string) (*account.WithoutPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*account.WithoutPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUseCaseMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUseCase)(nil).GetById), ctx, id)
}

// GetByIds mocks base method.
func (m *MockUseCase) GetByIds(ctx context.Context, ids []string) ([]*account.WithoutPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIds", ctx, ids)
	ret0, _ := ret[0].([]*account.WithoutPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIds indicates an expected call of GetByIds.
func (mr *MockUseCaseMockRecorder) GetByIds(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIds", reflect.TypeOf((*MockUseCase)(nil).GetByIds), ctx, ids)
}

// GetByNickname mocks base method.
func (m *MockUseCase) GetByNickname(ctx context.Context, nickname string) (*account.WithoutPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNickname", ctx, nickname)
	ret0, _ := ret[0].(*account.WithoutPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNickname indicates an expected call of GetByNickname.
func (mr *MockUseCaseMockRecorder) GetByNickname(ctx, nickname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNickname", reflect.TypeOf((*MockUseCase)(nil).GetByNickname), ctx, nickname)
}

// GetByQuery mocks base method.
func (m *MockUseCase) GetByQuery(ctx context.Context, query vo.Query) ([]*account.WithoutPassword, uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByQuery", ctx, query)
	ret0, _ := ret[0].([]*account.WithoutPassword)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByQuery indicates an expected call of GetByQuery.
func (mr *MockUseCaseMockRecorder) GetByQuery(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByQuery", reflect.TypeOf((*MockUseCase)(nil).GetByQuery), ctx, query)
}

// GetWithPasswordById mocks base method.
func (m *MockUseCase) GetWithPasswordById(ctx context.Context, id string) (*aggregate.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithPasswordById", ctx, id)
	ret0, _ := ret[0].(*aggregate.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithPasswordById indicates an expected call of GetWithPasswordById.
func (mr *MockUseCaseMockRecorder) GetWithPasswordById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithPasswordById", reflect.TypeOf((*MockUseCase)(nil).GetWithPasswordById), ctx, id)
}

// UpdateEmailById mocks base method.
func (m *MockUseCase) UpdateEmailById(ctx context.Context, id, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmailById", ctx, id, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmailById indicates an expected call of UpdateEmailById.
func (mr *MockUseCaseMockRecorder) UpdateEmailById(ctx, id, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmailById", reflect.TypeOf((*MockUseCase)(nil).UpdateEmailById), ctx, id, email)
}

// UpdateInfoById mocks base method.
func (m *MockUseCase) UpdateInfoById(ctx context.Context, id, firstName, lastName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInfoById", ctx, id, firstName, lastName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInfoById indicates an expected call of UpdateInfoById.
func (mr *MockUseCaseMockRecorder) UpdateInfoById(ctx, id, firstName, lastName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInfoById", reflect.TypeOf((*MockUseCase)(nil).UpdateInfoById), ctx, id, firstName, lastName)
}

// UpdateNickById mocks base method.
func (m *MockUseCase) UpdateNickById(ctx context.Context, id, nick string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNickById", ctx, id, nick)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNickById indicates an expected call of UpdateNickById.
func (mr *MockUseCaseMockRecorder) UpdateNickById(ctx, id, nick interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNickById", reflect.TypeOf((*MockUseCase)(nil).UpdateNickById), ctx, id, nick)
}

// UpdatePasswordById mocks base method.
func (m *MockUseCase) UpdatePasswordById(ctx context.Context, id, oldPassword, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePasswordById", ctx, id, oldPassword, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePasswordById indicates an expected call of UpdatePasswordById.
func (mr *MockUseCaseMockRecorder) UpdatePasswordById(ctx, id, oldPassword, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePasswordById", reflect.TypeOf((*MockUseCase)(nil).UpdatePasswordById), ctx, id, oldPassword, password)
}

// UpdateRoleById mocks base method.
func (m *MockUseCase) UpdateRoleById(ctx context.Context, id, role string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoleById", ctx, id, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoleById indicates an expected call of UpdateRoleById.
func (mr *MockUseCaseMockRecorder) UpdateRoleById(ctx, id, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoleById", reflect.TypeOf((*MockUseCase)(nil).UpdateRoleById), ctx, id, role)
}
